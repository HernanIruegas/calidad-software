// Programa para leer valores de X y Y de un archivo para calcular un resultado utilizando regresión linear
// Hernán Iruegas Villarreal A00817021
// 04/03/2018

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <math.h> // Para usar la función de square root
#include <iomanip> // Para imprimir los números con la precision de 5 decimales deseadas
using namespace std;
#include "Archivo.h"
#include "Calculo.h"


// Sirve para limpiar una línea, quitar espacios en blanco y otros caracteres especiales
//_p=QuitaEspacios
//_b=6
string quitaEspacios( string &linea ){
	//_i
	string lineaAux = ""; 

	// Hay que limpiar la línea leída de todos aquellos espacios en blanco
	for(int i = 0; i < linea.length(); i++){
        if(linea[i] != ' ' && linea[i] != '\t' && linea[i] != '\r' && linea[i] != '\v'){
          lineaAux += linea[i];
        }
    }

   return lineaAux;
}

// Sirve para obtener los valores de X y Y dentro del archivo, así como el valor con el que se calcula la predicción de la regresión lineal
//_p=obtenerInfoArchivo
void obtenerInfoArchivo( ifstream &archEntrada, vector<double> &vAllXValues, vector<double> &vAllYValues, int &iNumberOfPairs, int &iValueForRegression ){
	//_i
	string linea = "", aux = "", delimitador = ",";

	getline( archEntrada, linea );
	linea = quitaEspacios( linea );
	iValueForRegression = atoi( linea.c_str() );

	while( getline( archEntrada, linea ) ){

		iNumberOfPairs++;

		linea = quitaEspacios( linea );

		int pos = linea.find( delimitador );

		aux = linea.substr( 0, pos );
		vAllXValues.push_back( stof( aux.c_str() ) );
		linea.erase(0, pos + delimitador.length() );
		aux = linea.substr( 0, string::npos );
		vAllYValues.push_back( stof( aux.c_str() ) );

	}
}

// Sirve para obtener la información del archivo y realizar los calculos necesarios para la regresión lineal
//_p=calcularInfoArchivo
//_b=26
void calcularInfoArchivo(string sNombreArchivo, bool &bExiste, Archivo &archivo, int &iNumberOfPairs, int &iValueForRegression){

	//_i
	ifstream archEntrada; // Se necesita para abrir los archivos del usuario
	vector<double> vAllXValues;
	vector<double> vAllYValues;
	//_d=3
	//_d=2
	//_d=1

	archEntrada.open(sNombreArchivo);

	// Hay que validar que el nombre del archivo existe
	if(archEntrada){

		// Se lee el arhivo y se consiguen todos los valores de X y Y, además del valor con el que se quiere realizar el cálculo de la regresión lineal
		obtenerInfoArchivo( archEntrada, vAllXValues, vAllYValues, iNumberOfPairs, iValueForRegression ); 

		// Se crea el archivo y se obtiene los valores para sus atributos
		Calculo calculo;

		archivo.setNombre( sNombreArchivo );

		archivo.setSumXValues( calculo.calculateSumXValues( vAllXValues ) );
		archivo.setSumYValues( calculo.calculateSumYValues( vAllYValues ) );

		archivo.setAvgX( calculo.calculateAvgX( archivo.getSumXValues(), iNumberOfPairs ) );
		archivo.setAvgY( calculo.calculateAvgY( archivo.getSumYValues(), iNumberOfPairs ) );

		archivo.setSumSquaredXValues( calculo.calculateSumSquaredXValues( vAllXValues ) );
		archivo.setSumSquaredYValues( calculo.calculateSumSquaredYValues( vAllYValues ) );

		archivo.setSumXTimesYValues( calculo.calculateSumXTimesYValues( vAllXValues, vAllYValues ) );

		archivo.setTheta1( calculo.calculateTheta1(  archivo.getSumXTimesYValues(),  archivo.getSumSquaredXValues(),  archivo.getAvgY(),  archivo.getAvgX(),  iNumberOfPairs ) );
		archivo.setTheta0( calculo.calculateTheta0(  archivo.getAvgY(),  archivo.getTheta1(),  archivo.getAvgX() ) );

		archivo.setR( calculo.calculateR( iNumberOfPairs, archivo.getSumXTimesYValues(), archivo.getSumXValues(), archivo.getSumYValues(), archivo.getSumSquaredXValues(), archivo.getSumSquaredYValues() ) );
		archivo.setRSquared( calculo.calculateRSquared( archivo.getR() ) );
		
		archivo.setYPrediction( calculo.calculateYPrediction( archivo.getTheta0(), archivo.getTheta1(),  iValueForRegression ) );

		//_d=1
		//_d=5	

		archEntrada.close();
	}else{
		bExiste = false;
		cout<< "Error: Este archivo no existe" << endl;
	}
		//_d=2
	//_d=4
}

// Sirve para desplegar los resultados de los calculos obtenidos a partir de la información del archivo
//_p=desplegarInfoArchivo
void desplegarInfoArchivo(Archivo archivo, int iNumberOfPairs, int iValueForRegression){
	//_i
	cout << fixed << setprecision(5) ; // Para desplegar numeros redondeadoscon 5 decimales
	cout << "N = " << iNumberOfPairs << endl;
	cout << "xk = " << iValueForRegression << endl;
	cout << "r =  " << setprecision(5) << fixed << archivo.getR() << endl;
	cout << "r2 =  " << setprecision(5) << fixed << archivo.getRSquared() << endl;
	cout << "b0 =  " << setprecision(5) << fixed << archivo.getTheta0() << endl;
	cout << "b1 =  " << setprecision(5) << fixed << archivo.getTheta1() << endl;
	cout << "yk =  " << setprecision(5) << fixed << archivo.getYPrediction() << endl;

}

//_p=main
//_b=11
int main(){
	//_i
	//_d=3
	string sNombreArchivo;
	bool bExiste = true;
	Archivo archivo;
	int iNumberOfPairs = 0;
	int iValueForRegression = 0;

	cout << "Ingrese el nombre del archivo: "; //_m
	cin >> sNombreArchivo;

	//_d=1
	calcularInfoArchivo(sNombreArchivo, bExiste, archivo, iNumberOfPairs, iValueForRegression ); //_m
	
	if(bExiste)
		desplegarInfoArchivo(archivo, iNumberOfPairs, iValueForRegression); //m

	return 0;
}





// Clase Calculo que realiza todas las operaciones para realizar la regresión lineal
// Hernán Iruegas Villarreal A00817021
// 04/03/2018

//_p=Calculo
class Calculo {

	//_i
	public:

		double calculateSumXValues( vector<double> vAllXValues );
		double calculateSumYValues( vector<double> vAllYValues );
		double calculateAvgX( double fSumXValues, int iNumberOfPairs );
		double calculateAvgY( double fSumYValues, int iNumberOfPairs );
		double calculateSumSquaredXValues( vector<double> vAllXValues );
		double calculateSumSquaredYValues( vector<double> vAllYValues );
		double calculateSumXTimesYValues( vector<double> vAllXValues, vector<double> vAllYValues );
		double calculateTheta0( double fAvgY, double fTheta1, double fAvgX );
		double calculateTheta1( double fSumXtimesYValues, double fSumSquaredXValues, double fAvgY, double fAvgX, int iNumberOfPairs );
		double calculateR( int iNumberOfPairs, double fSumXtimesYValues, double fSumXValues, double fSumYValues, double fSumSquaredXValues, double fSumSquaredYValues );
		double calculateRSquared( double fR );
		double calculateYPrediction( double fTheta0, double fTheta1, int iValueForRegression );

};


double Calculo::calculateSumXValues( vector<double> vAllXValues ){

	double fSumXValues;

	for( int i = 0; i < vAllXValues.size(); i++ )
		fSumXValues += vAllXValues[i];
	
	return fSumXValues;
}

double Calculo::calculateSumYValues( vector<double> vAllYValues ){

	double fSumYValues;

	for( int i = 0; i < vAllYValues.size(); i++ )
		fSumYValues += vAllYValues[i];

	return fSumYValues;
}

double Calculo::calculateAvgX( double fSumXValues, int iNumberOfPairs ){

	double fAvgXAux;

	fAvgXAux = fSumXValues / iNumberOfPairs;

	return fAvgXAux;
}

double Calculo::calculateAvgY( double fSumYValues, int iNumberOfPairs ){

	double fAvgYAux;

	fAvgYAux = fSumYValues / iNumberOfPairs; 

	return fAvgYAux;
}

double Calculo::calculateSumSquaredXValues( vector<double> vAllXValues ){

	double fSumSquaredXValues;

	for( int i = 0; i < vAllXValues.size(); i++ )
		fSumSquaredXValues += ( vAllXValues[i] * vAllXValues[i] );

	return fSumSquaredXValues;
}

double Calculo::calculateSumSquaredYValues( vector<double> vAllYValues ){

	double fSumSquaredYValues;

	for( int i = 0; i < vAllYValues.size(); i++ )
		fSumSquaredYValues += ( vAllYValues[i] * vAllYValues[i] );

	return fSumSquaredYValues;
}

double Calculo::calculateSumXTimesYValues( vector<double> vAllXValues, vector<double> vAllYValues ){

	double fSumXtimesYValues;

	for( int i = 0; i < vAllYValues.size(); i++ )
		fSumXtimesYValues += ( vAllXValues[i] * vAllYValues[i] );

	return fSumXtimesYValues;
}

double Calculo::calculateTheta0( double fAvgY, double fTheta1, double fAvgX ){

	double fTheta0;

	fTheta0 = fAvgY - ( fTheta1 * fAvgX );

	return fTheta0;
}

double Calculo::calculateTheta1( double fSumXtimesYValues, double fSumSquaredXValues, double fAvgY, double fAvgX, int iNumberOfPairs ){

	double fTheta1;

	fTheta1 = ( fSumXtimesYValues - ( iNumberOfPairs * fAvgX * fAvgY ) ) / ( fSumSquaredXValues - ( iNumberOfPairs * fAvgX * fAvgX ) );

	return fTheta1;

}

double Calculo::calculateR( int iNumberOfPairs, double fSumXtimesYValues, double fSumXValues, double fSumYValues, double fSumSquaredXValues, double fSumSquaredYValues ){

	double fR;
	double nominator = iNumberOfPairs * fSumXtimesYValues - ( fSumXValues * fSumYValues ); 
	double denominatorPart1 = iNumberOfPairs * fSumSquaredXValues - ( fSumXValues * fSumXValues );
	double denominatorPart2 = iNumberOfPairs * fSumSquaredYValues - ( fSumYValues * fSumYValues );

	fR = nominator / sqrt( denominatorPart1 * denominatorPart2 );

	return fR;
}

double Calculo::calculateRSquared( double fR ){

	double fRSquared;

	fRSquared = fR * fR;

	return fRSquared;

}

double Calculo::calculateYPrediction( double fTheta0, double fTheta1, int iValueForRegression ){

	double fYPrediction;

	fYPrediction = 	fTheta0 + ( fTheta1 * iValueForRegression );

	return fYPrediction;
}




// Clase Archivo que guarda todos los valores resultado de las operaciones para realizar la regresión lineal
// Hernán Iruegas Villarreal A00817021
// 04/03/2018

//_p=Archivo
//_b=34
class Archivo {
	//_i
	public:
		//_d=9
		Archivo();
		string getNombre();
		double getSumXValues();
		double getSumYValues();
		double getAvgX();
		double getAvgY();
		double getSumSquaredXValues();
		double getSumSquaredYValues();
		double getSumXTimesYValues();
		double getTheta0();
		double getTheta1();
		double getR();
		double getRSquared();
		double getYPrediction();
		void setNombre( string sNombreArchivo ); 
		void setSumXValues( double fSumXValues );
		void setSumYValues( double fSumYValues );
		void setAvgX( double fAvgX );
		void setAvgY( double fAvgY );
		void setSumSquaredXValues( double fSumSquaredXValues );
		void setSumSquaredYValues( double fSumSquaredYValues );
		void setSumXTimesYValues( double fSumXtimesYValues );
		void setTheta0( double fTheta0 );
		void setTheta1( double fTheta1 );
		void setR( double fR);
		void setRSquared( double fRSquared );
		void setYPrediction( double fYPrediction );
		
	//_i
	private:
		//_d=4
		string sNombreArchivo;
		double fSumXValues;
		double fSumYValues;
		double fAvgX;
		double fAvgY;
		double fSumSquaredXValues;
		double fSumSquaredYValues;
		double fSumXtimesYValues;
		double fTheta0;
		double fTheta1;
		double fR;
		double fRSquared;
		double fYPrediction;	
};

Archivo::Archivo(){

	sNombreArchivo = "default.txt";
	fSumXValues = 0;
	fSumYValues = 0;
	fAvgX = 0;
	fAvgY = 0;
	fSumSquaredXValues = 0;
	fSumSquaredYValues = 0;
	fSumXtimesYValues = 0;
	fTheta0 = 0;
	fTheta1 = 0;
	fR = 0;
	fRSquared = 0;
	fYPrediction = 0;	
}
//_d=9

string Archivo::getNombre(){

	return this -> sNombreArchivo;
}

double Archivo::getSumXValues(){

	return this -> fSumXValues;
}

double Archivo::getSumYValues(){

	return this -> fSumYValues;
}

double Archivo::getAvgX(){

	return this -> fAvgX;
}

double Archivo::getAvgY(){

	return this -> fAvgY;
}

double Archivo::getSumSquaredXValues(){

	return this -> fSumSquaredXValues;
}

double Archivo::getSumSquaredYValues(){

	return this -> fSumSquaredYValues;
}

double Archivo::getSumXTimesYValues(){

	return this -> fSumXtimesYValues;
}

double Archivo::getTheta0(){

	return this -> fTheta0;
}

double Archivo::getTheta1(){

	return this -> fTheta1;
}

double Archivo::getR(){

	return this -> fR;
}

double Archivo::getRSquared(){

	return this -> fRSquared;
}

double Archivo::getYPrediction(){

	return this -> fYPrediction;
}

//_d=8

void Archivo::setNombre( string sNombreArchivo ){

	this -> sNombreArchivo = sNombreArchivo;
}

void Archivo::setSumXValues( double fSumXValues ){

	this -> fSumXValues = fSumXValues; 
}

void Archivo::setSumYValues( double fSumYValues ){

	this -> fSumYValues = fSumYValues ; 
}

void Archivo::setAvgX( double fAvgX ){

	this -> fAvgX = fAvgX; 
}

void Archivo::setAvgY( double fAvgY ){

	this -> fAvgY = fAvgY; 
}

void Archivo::setSumSquaredXValues( double fSumSquaredXValues ){

	this -> fSumSquaredXValues = fSumSquaredXValues; 
}

void Archivo::setSumSquaredYValues( double fSumSquaredYValues ){

	this -> fSumSquaredYValues = fSumSquaredYValues; 
}

void Archivo::setSumXTimesYValues( double fSumXtimesYValues ){

	this -> fSumXtimesYValues = fSumXtimesYValues; 
}

void Archivo::setTheta0( double fTheta0 ){

	this -> fTheta0 = fTheta0; 
}

void Archivo::setTheta1( double fTheta1 ){

	this -> fTheta1 = fTheta1; 
}

void Archivo::setR( double fR){

	this -> fR = fR; 
}

void Archivo::setRSquared( double fRSquared ){

	this -> fRSquared = fRSquared; 
}

void Archivo::setYPrediction( double fYPrediction ){

	this -> fYPrediction = fYPrediction; 
}


	











